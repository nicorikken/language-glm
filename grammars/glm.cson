name: "GridLAB-D Model (GLM)"
scopeName: "source.glm"
fileTypes: [
  "glm"
]
patterns: [
  {include: "#comments"}
  {include: "#macros"}
  # directives
  {include: "#clock"}
  {include: "#modules"}
  {include: "#objects"}
]
repository:

# comments
  comments:
    patterns: [{
      match: "\/\/.*$"
      name: 'comment.line.glm'
    }]

# macros
  macros:
    patterns: [{
      # TODO ensure mid-statement semicolumn is not breaking statement parsing
      match: "^\\s*(\#.*?)(?=$|;|\/\/)"
      captures:
        1:
          name: "meta.macro.glm"
          patterns: [
            {include: "#macro-closed"}
            {include: "#macro-assign"}
            {include: "#macro-command-options"}
            {include: "#macro-commands"}
            {include: "#macro-file"}
            {include: "#macro-message"}
            {include: "#macro-path"}
            {include: "#macro-test"}
            {include: "#macro-variable"}
            {include: "#macro-variable-custom"}
            {include: "#macro-variable-environment"}
            {include: "#macro-variable-global"}
        ]}]
  "macro-closed":
    patterns: [{
      match: "(\#(?:endif|else))"
      captures:
        1: name: "keyword.macro.glm"
    }]
  "macro-commands":
    patterns: [{
      match: "(\#(?:start|system))\\s+(.*)"
      captures:
        1: name: 'keyword.macro.glm'
        2:
          patterns: [
            {include: "#command"}
          ]}]
  "macro-command-options":
    patterns: [{
      match: "(\#option)\\s+(.*)"
      captures:
        1: name: 'keyword.macro.glm'
        2:
          patterns: [
            {include: "#command-option"}
          ]}]
  "macro-file":
    patterns: [{
      match: "(\#include)\\s+(.*)"
      captures:
        1: name: 'keyword.macro.glm'
        2:
          patterns: [
            {include: "#file"}
          ]}]
  "macro-message":
    patterns: [{
      match: "(\#(?:error|print|warning))\\s+(.*)"
      captures:
        1: name: 'keyword.macro.glm'
        2:
          patterns: [
            {include: "#string"}
        ]}]
  "macro-path":
    patterns: [{
      match: "(\#(?:binpath|incpath|libpath))\\s+(.*)"
      captures:
        1: name: 'keyword.macro.glm'
        2:
          patterns: [
            {include: "#path"}
          ]}]
  "macro-test":
    patterns: [{
      match: "(\#if)\\s+(.*)"
      captures:
        1: name: 'keyword.macro.glm'
        2:
          patterns: [
            {include: "#test"}
          ]}]
  "macro-variable":
    patterns: [{
      match: "(\#(?:ifdef|ifndef))\\s+(.*)"
      captures:
        1: name: 'keyword.macro.glm'
        2:
          patterns: [
            {include: "#variable"}
          ]}]
  "macro-variable-custom":
    patterns: [{
      match: "(\#define)\\s+(.*)"
      captures:
        1: name: 'keyword.macro.glm'
        2:
          patterns: [
            {include: "#set-custom-variable"}
          ]}]
  "macro-variable-environment":
    patterns: [{
      match: "(\#setenv)\\s+(.*)"
      captures:
        1: name: 'keyword.macro.glm'
        2:
          patterns: [
            {include: "#set-environment-variable"}
          ]}]
  "macro-variable-global":
    patterns: [{
      match: "(\#set)\\s+(.*)"
      captures:
        1: name: 'keyword.macro.glm'
        2:
          patterns: [
            {include: "#set-global-variable"}
            {include: "#set-custom-variable"} #fallback to custom
          ]}]

# directives (generic category)

# TODO class

# clock
  clock:
    patterns: [{
      name: 'clock.glm'
      begin: "^\\s*(clock)\\s*\\{?"
      beginCaptures:
        1: name: 'keyword.type.clock.glm'
      end: "}"
      patterns: [
        {include: "#clock-timestamps"}
        {include: "#clock-timezones"}
        {include: "#comments"}
        #TODO maybe include generic variables
      ]}]
  "clock-timestamps":
    patterns: [{
      name: 'clock.property.glm'
      match: "(?<=^|;)\\s*(timestamp|stoptime)\\s+([^;]*)(?=\\s*;)"
      captures:
        1: name: 'keyword.clock.property.glm'
        2:
          patterns: [
            {include: "#timestamps"}
          ]}]
  "clock-timezones":
    patterns: [{
      name: 'clock.property.glm'
      # TODO make this match more selective
      match: "^\\s*(timezone)\\s+([^;]*)(?=\\s*;)"
      captures:
        1: name: 'keyword.clock.property.glm'
        2: name: 'constant.timezone.clock.property.glm'
      }]

# TODO extern

# TODO global

# TODO instance

# TODO link

# module
  modules:
    patterns: [
      {include: "#module-inline"}
      {include: "#module-block"}
    ]
  "module-inline":
    patterns: [{
      name: 'module.glm'
      match: "(?<=^|\\s)(module)\\s+([^;\\s]*\\s*);"
      captures:
        1: name: 'keyword.type.module.glm'
        2: patterns: [{include: "#module-name"}]
      }]
  "module-block":
    patterns: [{
      name: 'module.glm'
      begin: "(?<=^|\\s)(module)\\s+([^;\\{\\\/]*\\s*)\\{?"
      beginCaptures:
        1: name: "keyword.type.module.glm"
        2: patterns: [{include: "#module-name"}]
      end: "}"
      patterns: [
        {include: "#comments"}
        {include: "#module-global-variables"}
        #TODO maybe include generic variables
      ]}]
  "module-name":
    patterns: [{
      comment: "made to only match the provided module names"
      match: '(?<=^)(climate|market|powerflow|residential|reliability|generators|commercial|communications|matpower|network|assert|tape)(?=\\s*\\Z)'
      captures:
        1: name: 'entity.name.function.module.glm'
      }]
  "module-global-variables":
    patterns:[
      {
        match: '(?<=^|;)\\s*(acceleration_factor|default_maximum_voltage_error|fault_impedance|geographic_degree|line_capacitance|lu_solver|maximum_voltage_error|nominal_frequency|NR_iteration_limit|NR_superLU_procs|primary_voltage_ratio|require_voltage_control|show_matrix_values|solver_method|warning_underfrequency|warning_overfrequency|warning_undervoltage|warning_overvoltage|warning_voltageangle)\\s+([^;]*)(?=\\s*;)'
        captures:
          1: name: 'keyword.global.powerflow.module.glm'
          2: patterns: [{include: "#wildcard-element"}] #TODO
      }
      {
        match:'(?<=^|;)\\s*(default_line_voltage|default_line_current|default_outdoor_temperature|default_humidity|default_solar|default_etp_iterations)\\s+([^;]*)(?=\\s*;)'
        captures:
          1: name: 'keyword.global.residential.module.glm'
          2: patterns: [{include: "#wildcard-element"}] #TODO
      }
      {
        match:'(?<=^|;)\\s*(warn_control|warn_low_temp|warn_high_temp)\\s+([^;]*)(?=\\s*;)'
        captures:
          1: name: 'keyword.global.commercial.module.glm'
          2: patterns: [{include: "#wildcard-element"}] #TODO
      }
      {
        match:'(?=^|;)\\s*(gnuplot_path|flush_interval)\\s+([^;]*)(?=\\s*;)'
        captures:
          1: name: 'keyword.global.tape.module.glm'
          2: patterns: [{include: "#wildcard-element"}] #TODO
      }
    ]

# TODO object
  objects:
    patterns: [
      name: 'object.glm'
      begin: "(?<=^|\\s)(object)\\s*(?:(?<=\\s)([^\\{\\s:]*)(?::(\\d*)(?:\\.\\.(\\d+))?)?)?\\s*\\{?"
      beginCaptures:
        # TODO make class match more selective, based on class name
        1: name: "storage.type.object.glm"
        2: name: "entity.name.function.object.glm"
        3: name: "constant.id.object.glm"
        4: name: "constant.id.object.glm"
      end: "}"
      patterns: [
        {include: "#comments"}
        {include: "#object-properties-common"}
        {include: "#powerflow-properties-node"}
        {include: "#powerflow-properties-link"}
        {include: "#powerflow-properties-line"}
        {include: "#powerflow-properties-line_configuration"}
        {include: "#powerflow-properties-line_spacing"}
        {include: "#powerflow-properties-overhead_line"}
        {include: "#powerflow-properties-underground_line"}
        #TODO include other properties
      ]]
  "object-properties-common":
    patterns: [{
      name: 'object.common.property.glm'
      # TODO make this match more selective
      match: "^\\s*(name|id|groupid|parent|rank|schedule_skew|latitude|longitude|in|out|heartbeat|flags)\\s+([^;]*)(?=\\s*;)"
      captures:
        1: name: 'keyword.object.common.property.glm'
        2: patterns: [{include: "#wildcard-element"}] #TODO
      }]
  "powerflow-properties-node":
    comment: "base class for the powerflow modules"
    #TODO have this base class used by derived classes
    patterns: [{
      name: 'node.powerflow.property.glm'
      match: "^\\s*(phases|nominal_voltage|voltage_(?:A|B|C|AB|BC|CA)|current_[ABC]|power_[ABC]|shunt_[ABC]|bustype)\\s+([^;]*)(?=\\s*;)"
      captures:
        1: name: 'entity.name.function.node.powerflow.glm'
        2: patterns: [{include: "#wildcard-element"}] #TODO
      }]
  "powerflow-properties-link":
    comment: "base class for the powerflow modules"
    #TODO have this base class used by derived classes
    patterns: [{
      name: 'link.powerflow.property.glm'
      match: "^\\s*(from|to|power_in|power_out|power_losses|power_in_[ABC]|power_out[ABC]|power_losses_[ABC]|status|current_out_[ABC]|current_in_[ABC]|flow_direction|mean_repair_time)\\s+([^;]*)(?=\\s*;)"
      captures:
        1: name: 'entity.name.function.link.powerflow.glm'
        2: patterns: [{include: "#wildcard-element"}] #TODO
      }]
  "powerflow-properties-line":
    patterns: [
      # {include: "#powerflow-properties-link"} TODO make derivation
      {
        name: 'line.powerflow.property.glm'
        match: "^\\s*(configuration|length)\\s+([^;]*)(?=\\s*;)"
        captures:
          1: name: 'entity.name.function.line.powerflow.glm'
          2: patterns: [{include: "#wildcard-element"}] #TODO
      }]
  "powerflow-properties-line_configuration":
    patterns: [{
      name: 'line-configuration.powerflow.property.glm'
      match: "^\\s*(conductor_[ABCN]|spacing|z(?:11|12|13|21|22|23|31|32|33))\\s+([^;]*)(?=\\s*;)"
      captures:
        1: name: 'entity.name.function.line-configuration.powerflow.glm'
        2: patterns: [{include: "#wildcard-element"}] #TODO
    }]
  "powerflow-properties-line_spacing":
    patterns: [{
      name: 'line-spacing.powerflow.property.glm'
      match: "^\\s*(distance_(?:AB|BC|CA|AN|BN|CN|AE|BE|CE|NE))\\s+([^;]*)(?=\\s*;)"
      captures:
        1: name: 'entity.name.function.line-spacing.powerflow.glm'
        2: patterns: [{include: "#wildcard-element"}] #TODO
      }]
  "powerflow-properties-overhead_line":
    patterns: [{
      name: 'overhead-line.powerflow.property.glm'
      match: "^\\s*(geometric_mean_radius|resistance|diameter|rating\.(?:summer|winter)\.(?:continuous|emergency))\\s+([^;]*)(?=\\s*;)"
      captures:
        1: name: 'entity.name.function.overhead-line.powerflow.glm'
        2: patterns: [{include: "#wildcard-element"}] #TODO
    }]
  "powerflow-properties-underground_line":
    patterns: [{
      name: 'underground-line.powerflow.property.glm'
      match: "^\\s*(outer_diameter|conductor_(?:gmr|diameter|resistance)|neutral_(?:gmr|diameter|resistance|strands)|insulation_relative_permitivitty|shield_(?:gmr|resistance)|rating\.(?:summer|winter)\.(?:continuous|emergency))\\s+([^;]*)(?=\\s*;)"
      captures:
        1: name: 'entity.name.function.underground-line.powerflow.glm'
        2: patterns: [{include: "#wildcard-element"}] #TODO
    }]


# TODO schedule

# TODO script

# variables
  coordinates:
    comments: "support for longitude and latitude"
    patterns: [{
      match: "(\\d+[NSEW]\\d+[:\\.]\\d*)"
      captures:
        1: name: 'constant.coordinate.glm'
      }]

  "macro-variable-expansion":
    comment: "macro expansion of variables"
    patterns: [{
      match: "{(\\w+)}"
      name: 'meta.variable.macro.glm'
      captures:
        1: name: 'entity.variable.macro.glm'
    }]
  "string":
    patterns: [{
      match: "\\\"[^\\\"]*\\\""
      name: 'string.glm'
    }]

  # TODO implement these specific types
  "set-environment-variable":
    patterns: [{
      # TODO split based on acceptable variable values.
      match: "(DBFLAGS|CC|COMPSPEC|SHELL|GLPATH|GLTEMP|HOMEVAR|HOMEDRIVE|TEMP|USER|USERNAME|GRIDLABD|PATH|INCLUDE|LIB|CCFLAGS|CXXFLAGS|CXX|LDFLAGS|GLBROWSER|LD_LIBRARY_PATH|COMPUTERNAME|HOSTNAME|TZ|NUMBER_OF_PROCESSORS)=(.+)"
      captures:
        # TODO find a name with a distinct default color from custom variables
        1: name: 'keyword.environment.variable.glm'
        2:
          patterns: [
            {include: "#wildcard-element"}
          ]}]
  "set-global-variable":
    comment: "restricted to predefined values, use #set-custom-variable for this generic fallback"
    patterns: [{
      # TODO split based on acceptable variable values
      match: "(APPLE|browser|check_version|checkpoint_file|checkpoint_interval|checkpoint_keepall|checkpoint_seqnum|checkpoint_type|clean|clock|command_line|compileonly|complex_format|dateformat|debug|debugger|double_format|dumpall|dumpfile|environment|execdir|event_trace|event_trace_filter|force_compile|gdb|gdb_window|GUID|include|infourl|init_sequence|init_max_defer|inline_block_size|iteration_limit|kmlfile|LINUX|mailto|mainloop_state|MATLAB|maximum_synctime|maximum_timestep|modelname|module_compiler_flags|mt_profile|MYSQL|no_depricate|nolocks|NOW|object_format|object_scan|object_tree_balance|pauseat|pauseatexit|platform|profiler|quiet|random_number_generator|randomseed|relax_naming_rules|return_code|RUN|run_realtime|runchecks|savefile|server_portnum|server_quit_on_close|show_progress|skipsafe|starttime|stoptime|streaming_io|strictnames|suppress_repeat_messages|technology_readiness_level|test|testoutputfile|threadcount|tmp|trace|urlbase|validate|validate_report|verbose|version.major|version.minor|warn|website|WINDOWS|workdir|xml_encoding)=(.+)"
      captures:
        # TODO find a name with a distinct default color from custom variables
        1: name: 'keyword.name.global.variable.glm'
        2:
          patterns: [
            {include: "#wildcard-element"}
          ]}]
  "set-custom-variable":
    patterns: [{
      match: "(\\w+)=(.+)"
      captures:
        1: name: 'entity.variable.glm'
        2:
          patterns: [
            {include: "#wildcard-element"}
          ]}]

  timestamps:
    patterns: [{
      match: "(\'\\d{4}-\\d{1,2}-\\d{1,2}\\s+\\d{1,2}\\:\\d{1,2}\\:\\d{1,2}(?:\\s+[A-Z]{3})?\\\'|INIT|NEVER|INVALID)"
      name: 'constant.timestamp.glm'
    }]

  "intrinsic-variable-expansion":
      comment: "intrinsic expansion of variables in object definitions"
      patterns: [{
        match: "{(file|filename|fileext|filepath|line|namespace|class|id|var)}"
        name: 'meta.variable.macro.glm'
        captures:
          1: name: 'entity.name.function.intrinsic.expansion.glm'
      }]

#
# Not yet completed (TODO)
#
  "wildcard-element":
    patterns: [{
      match: "([^\\s\\;]+)"
      captures:
        1:
          name: 'constant.wildcard.glm'
          patterns: [
            {include: "#intrinsic-variable-expansion"}
            {include: "#macro-variable-expansion"}
          ]}]
  command:
    patterns: [
      {include: "#wildcard-element"}
    ]
  "command-option":
    patterns: [
      {include: "#wildcard-element"}
    ]
  file:
    patterns: [
      {include: "#wildcard-element"}
    ]
  path:
    patterns: [
      {include: "#wildcard-element"}
    ]
  test:
    patterns: [
      {include: "#wildcard-element"}
    ]
  variable:
    patterns: [
      {include: "#wildcard-element"}
    ]
