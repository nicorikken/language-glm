key: 'powerflow-properties-meter'

# class meter {
# 	parent node;
# 	class node {
# 		parent powerflow_object;
# 		class powerflow_object {
# 			set {A=1, B=2, C=4, D=256, N=8, S=112, G=128} phases;
# 			double nominal_voltage[V];
# 		}
#
# 		function delta_linkage_node();
# 		function interupdate_pwr_object();
# 		function delta_freq_pwr_object();
# 		enumeration {SWING=2, PV=1, PQ=0} bustype; // defines whether the node is a PQ, PV, or SWING node
# 		set {HASSOURCE=1} busflags; // flag indicates node has a source for voltage, i.e. connects to the swing node
# 		object reference_bus; // reference bus from which frequency is defined
# 		double maximum_voltage_error[V]; // convergence voltage limit or convergence criteria
# 		complex voltage_A[V]; // bus voltage, Phase A to ground
# 		complex voltage_B[V]; // bus voltage, Phase B to ground
# 		complex voltage_C[V]; // bus voltage, Phase C to ground
# 		complex voltage_AB[V]; // line voltages, Phase AB
# 		complex voltage_BC[V]; // line voltages, Phase BC
# 		complex voltage_CA[V]; // line voltages, Phase CA
# 		complex current_A[A]; // bus current injection (in = positive), this an accumulator only, not a output or input variable
# 		complex current_B[A]; // bus current injection (in = positive), this an accumulator only, not a output or input variable
# 		complex current_C[A]; // bus current injection (in = positive), this an accumulator only, not a output or input variable
# 		complex power_A[VA]; // bus power injection (in = positive), this an accumulator only, not a output or input variable
# 		complex power_B[VA]; // bus power injection (in = positive), this an accumulator only, not a output or input variable
# 		complex power_C[VA]; // bus power injection (in = positive), this an accumulator only, not a output or input variable
# 		complex shunt_A[S]; // bus shunt admittance, this an accumulator only, not a output or input variable
# 		complex shunt_B[S]; // bus shunt admittance, this an accumulator only, not a output or input variable
# 		complex shunt_C[S]; // bus shunt admittance, this an accumulator only, not a output or input variable
# 		complex current_AB[A]; // bus current delta-connected injection (in = positive), this an accumulator only, not a output or input variable
# 		complex current_BC[A]; // bus current delta-connected injection (in = positive), this an accumulator only, not a output or input variable
# 		complex current_CA[A]; // bus current delta-connected injection (in = positive), this an accumulator only, not a output or input variable
# 		complex current_AN[A]; // bus current wye-connected injection (in = positive), this an accumulator only, not a output or input variable
# 		complex current_BN[A]; // bus current wye-connected injection (in = positive), this an accumulator only, not a output or input variable
# 		complex current_CN[A]; // bus current wye-connected injection (in = positive), this an accumulator only, not a output or input variable
# 		complex power_AB[VA]; // bus power delta-connected injection (in = positive), this an accumulator only, not a output or input variable
# 		complex power_BC[VA]; // bus power delta-connected injection (in = positive), this an accumulator only, not a output or input variable
# 		complex power_CA[VA]; // bus power delta-connected injection (in = positive), this an accumulator only, not a output or input variable
# 		complex power_AN[VA]; // bus power wye-connected injection (in = positive), this an accumulator only, not a output or input variable
# 		complex power_BN[VA]; // bus power wye-connected injection (in = positive), this an accumulator only, not a output or input variable
# 		complex power_CN[VA]; // bus power wye-connected injection (in = positive), this an accumulator only, not a output or input variable
# 		complex shunt_AB[S]; // bus shunt delta-connected admittance, this an accumulator only, not a output or input variable
# 		complex shunt_BC[S]; // bus shunt delta-connected admittance, this an accumulator only, not a output or input variable
# 		complex shunt_CA[S]; // bus shunt delta-connected admittance, this an accumulator only, not a output or input variable
# 		complex shunt_AN[S]; // bus shunt wye-connected admittance, this an accumulator only, not a output or input variable
# 		complex shunt_BN[S]; // bus shunt wye-connected admittance, this an accumulator only, not a output or input variable
# 		complex shunt_CN[S]; // bus shunt wye-connected admittance, this an accumulator only, not a output or input variable
# 		double mean_repair_time[s]; // Time after a fault clears for the object to be back in service
# 		enumeration {OUT_OF_SERVICE=0, IN_SERVICE=1} service_status; // In and out of service flag
# 		double service_status_double; // In and out of service flag - type double - will indiscriminately override service_status - useful for schedules
# 		double previous_uptime[min]; // Previous time between disconnects of node in minutes
# 		double current_uptime[min]; // Current time since last disconnect of node in minutes
# 		bool Norton_dynamic; // Flag to indicate a Norton-equivalent connection -- used for generators and deltamode
# 		object topological_parent; // topological parent as per GLM configuration
# 	}
#
# 	function reset();
# 	function delta_linkage_node();
# 	function interupdate_pwr_object();
# 	function delta_freq_pwr_object();
# 	double measured_real_energy[Wh]; // metered real energy consumption, cummalitive
# 	double measured_reactive_energy[VAh]; // metered reactive energy consumption, cummalitive
# 	complex measured_power[VA]; // metered real power
# 	complex measured_power_A[VA]; // metered complex power on phase A
# 	complex measured_power_B[VA]; // metered complex power on phase B
# 	complex measured_power_C[VA]; // metered complex power on phase C
# 	double measured_demand[W]; // greatest metered real power during simulation
# 	double measured_real_power[W]; // metered real power
# 	double measured_reactive_power[VAr]; // metered reactive power
# 	complex meter_power_consumption[VA]; // metered power used for operating the meter; standby and communication losses
# 	complex measured_voltage_A[V]; // measured line-to-neutral voltage on phase A
# 	complex measured_voltage_B[V]; // measured line-to-neutral voltage on phase B
# 	complex measured_voltage_C[V]; // measured line-to-neutral voltage on phase C
# 	complex measured_voltage_AB[V]; // measured line-to-line voltage on phase AB
# 	complex measured_voltage_BC[V]; // measured line-to-line voltage on phase BC
# 	complex measured_voltage_CA[V]; // measured line-to-line voltage on phase CA
# 	complex measured_current_A[A]; // measured current on phase A
# 	complex measured_current_B[A]; // measured current on phase B
# 	complex measured_current_C[A]; // measured current on phase C
# 	bool customer_interrupted; // Reliability flag - goes active if the customer is in an 'interrupted' state
# 	bool customer_interrupted_secondary; // Reliability flag - goes active if the customer is in an 'secondary interrupted' state - i.e., momentary
# 	double monthly_bill[$]; // Accumulator for the current month's bill
# 	double previous_monthly_bill[$]; // Total monthly bill for the previous month
# 	double previous_monthly_energy[kWh]; // Total monthly energy for the previous month
# 	double monthly_fee[$]; // Once a month flat fee for customer hook-up
# 	double monthly_energy[kWh]; // Accumulator for the current month's energy consumption
# 	enumeration {TIERED_RTP=4, HOURLY=3, TIERED=2, UNIFORM=1, NONE=0} bill_mode; // Billing structure desired
# 	object power_market; // Market (auction object) where the price is being received from
# 	int32 bill_day; // day of month bill is to be processed (currently limited to days 1-28)
# 	double price[$/kWh]; // current price of electricity
# 	double price_base[$/kWh]; // Used only in TIERED_RTP mode to describe the price before the first tier
# 	double first_tier_price[$/kWh]; // price of electricity between first tier and second tier energy usage
# 	double first_tier_energy[kWh]; // switching point between base price and first tier price
# 	double second_tier_price[$/kWh]; // price of electricity between second tier and third tier energy usage
# 	double second_tier_energy[kWh]; // switching point between first tier price and second tier price
# 	double third_tier_price[$/kWh]; // price of electricity when energy usage exceeds third tier energy usage
# 	double third_tier_energy[kWh]; // switching point between second tier price and third tier price
# }

patterns:[{
  include: "#powerflow-properties-node"
}
{
  name: 'meter.powerflow.property.glm'
  match: "^\\s*(measured_(?:real_energy|reactive_energy|demand|real_power|reactive_power)|price|price_base|monthly_(?:fee|bill|energy)|previous_monthly_(?:bill|energy)|(?:first|second|third)_tier_(?:price|energy))\\s+([^;]*)(?=\\s*;)"
  captures:
    1: name: 'entity.name.function.meter.powerflow.glm'
    2: patterns: [{include: "#double"}]
}
{
  name: 'meter.powerflow.property.glm'
  match: "^\\s*(measured_(?:power(?:_[ABC])?|voltage_(?:A|B|C|AB|BC|CA)|current_[ABC])|meter_power_consumption)\\s+([^;]*)(?=\\s*;)"
  captures:
    1: name: 'entity.name.function.meter.powerflow.glm'
    2: patterns: [{include: "#complex"}]
}
{
  name: 'meter.powerflow.property.glm'
  match: "^\\s*(customer_interrupted|customer_interrupted_secondary)\\s+([^;]*)(?=\\s*;)"
  captures:
    1: name: 'entity.name.function.meter.powerflow.glm'
    2: patterns: [{include: "#boolean"}]
}
{
  name: 'meter.powerflow.property.glm'
  match: "^\\s*(bill_mode)\\s+([^;]*)(?=\\s*;)"
  captures:
    1: name: 'entity.name.function.meter.powerflow.glm'
    2: patterns: [{include: "#enumeration"}]
}
{
  name: 'meter.powerflow.property.glm'
  match: "^\\s*(bill_day)\\s+([^;]*)(?=\\s*;)"
  captures:
    1: name: 'entity.name.function.meter.powerflow.glm'
    2: patterns: [{include: "#int32"}]
}
{
  name: 'meter.powerflow.property.glm'
  match: "^\\s*(power_market)\\s+([^;]*)(?=\\s*;)"
  captures:
    1: name: 'entity.name.function.meter.powerflow.glm'
    2: patterns: [{include: "#object"}]
}]
