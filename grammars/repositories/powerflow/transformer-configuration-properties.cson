key: 'powerflow-properties-transformer_configuration'

# class transformer_configuration {
# 	enumeration {SINGLE_PHASE_CENTER_TAPPED=5, SINGLE_PHASE=4, DELTA_GWYE=3, DELTA_DELTA=2, WYE_WYE=1, UNKNOWN=0} connect_type; // connect type enum: Wye-Wye, single-phase, etc.
# 	enumeration {VAULT=3, PADMOUNT=2, POLETOP=1, UNKNOWN=0} install_type; // Defines location of the transformer installation
# 	enumeration {DRY=2, MINERAL_OIL=1, UNKNOWN=0} coolant_type; // coolant type, used in life time model
# 	enumeration {DFOW=6, DFOA=5, NDFOW=4, NDFOA=3, FA=2, OA=1, UNKNOWN=0} cooling_type; // type of coolant fluid used in life time model
# 	double primary_voltage[V]; // primary voltage level in L-L value kV
# 	double secondary_voltage[V]; // secondary voltage level kV
# 	double power_rating[kVA]; // kVA rating of transformer, total
# 	double powerA_rating[kVA]; // kVA rating of transformer, phase A
# 	double powerB_rating[kVA]; // kVA rating of transformer, phase B
# 	double powerC_rating[kVA]; // kVA rating of transformer, phase C
# 	double resistance[pu*Ohm]; // Series impedance, pu, real
# 	double reactance[pu*Ohm]; // Series impedance, pu, imag
# 	complex impedance[pu*Ohm]; // Series impedance, pu
# 	double resistance1[pu*Ohm]; // Secondary series impedance (only used when you want to define each individual winding seperately, pu, real
# 	double reactance1[pu*Ohm]; // Secondary series impedance (only used when you want to define each individual winding seperately, pu, imag
# 	complex impedance1[pu*Ohm]; // Secondary series impedance (only used when you want to define each individual winding seperately, pu
# 	double resistance2[pu*Ohm]; // Secondary series impedance (only used when you want to define each individual winding seperately, pu, real
# 	double reactance2[pu*Ohm]; // Secondary series impedance (only used when you want to define each individual winding seperately, pu, imag
# 	complex impedance2[pu*Ohm]; // Secondary series impedance (only used when you want to define each individual winding seperately, pu
# 	double shunt_resistance[pu*Ohm]; // Shunt impedance on primary side, pu, real
# 	double shunt_reactance[pu*Ohm]; // Shunt impedance on primary side, pu, imag
# 	complex shunt_impedance[pu*Ohm]; // Shunt impedance on primary side, pu
# 	double core_coil_weight[lb]; // The weight of the core and coil assembly in pounds
# 	double tank_fittings_weight[lb]; // The weight of the tank and fittings in pounds
# 	double oil_volume[gal]; // The number of gallons of oil in the transformer
# 	double rated_winding_time_constant[h]; // The rated winding time constant in hours
# 	double rated_winding_hot_spot_rise[degC]; // winding hottest-spot rise over ambient temperature at rated load, degrees C
# 	double rated_top_oil_rise[degC]; // top-oil hottest-spot rise over ambient temperature at rated load, degrees C
# 	double no_load_loss[pu]; // Another method of specifying transformer impedances, defined as per unit power values (shunt)
# 	double full_load_loss[pu]; // Another method of specifying transformer impedances, defined as per unit power values (shunt and series)
# 	double reactance_resistance_ratio; // the reactance to resistance ratio (X/R)
# 	double installed_insulation_life[h]; // the normal lifetime of the transformer insulation at rated load, hours
# }

patterns:[{
  include: "#object-properties-common"
}
{
  name: 'transformer-configuration.powerflow.property.glm'
  match: "^\\s*(connect_type|install_type|coolant_type|cooling_type)\\s+([^;]*)(?=\\s*;)"
  captures:
    1: name: 'entity.name.function.transformer-configuration.powerflow.glm'
    2: patterns: [{include: "#enumeration"}]
}
{
  name: 'transformer-configuration.powerflow.property.glm'
  match: "^\\s*(primary_voltage|secondary_voltage|power[ABC]?_rating|resistance[12]?|reactance[12]?|shunt_(?:resistance|reactance)|full_load_loss|no_load_loss|reactance_resistance_ratio|core_coil_weight|tank_fittings_weight|oil_volume|rated_winding_hot_spot_rise|rated_top_oil_rise|rated_winding_time_constant|installed_insulation_life)\\s+([^;]*)(?=\\s*;)"
  captures:
    1: name: 'entity.name.function.transformer-configuration.powerflow.glm'
    2: patterns: [{include: "#double"}]
}
{
  name: 'transformer-configuration.powerflow.property.glm'
  match: "^\\s*(impedance[12]?|shunt_impedance)\\s+([^;]*)(?=\\s*;)"
  captures:
    1: name: 'entity.name.function.transformer-configuration.powerflow.glm'
    2: patterns: [{include: "#complex"}]
}]
